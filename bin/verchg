#!/bin/bash

#
# Simple script to update the version in the package.json
# The arguments to this script are:
#
# $1 = mode (major, minor, bugfix)
#

#
# This function takes a version number, and the mode to bump it, and
# increments (and resets) the proper components so that the result is
# placed in the variable `new_version` for use by the caller.
#
# $1 = mode (major, minor, bugfix, push)
# $2 = version (x.y.z)
#
function bump {
  local mode="$1"
  local old="$2"
  # find out the three components of the current version...
  local parts=( ${old//./ } )
  # now bump it up based on the mode...
  case "$1" in
    major|maj)
      local bv=$((parts[0] + 1))
      new_version="${bv}.0.0"
      ;;
    minor|min)
      local bv=$((parts[1] + 1))
      new_version="${parts[0]}.${bv}.0"
      ;;
    bugfix|patch|fix|bug)
      local bv=$((parts[2] + 1))
      new_version="${parts[0]}.${parts[1]}.${bv}"
      ;;
    push|nothing)
      new_version=${old}
      ;;
  esac
}


#
# Function to read the existing project name and version number from the
# package.json file, and populate the following variables with these values:
#
# $version = "1.54.3"
# $project = "api"
# $today = "2016 Apr 14"
#
function pull_values {
  project=`grep '^\s*\"name\": \".*\",$' $proj | awk '{print $2}' | tr -d '",'`
  version=`grep '^\s*\"version\": \"[0-9.]*\",$' $proj | awk '{print $2}' | tr -d '",'`
  today=$(date +"%Y %b %d")
}


#
# Function to update the package.json file with the new version by a
# simple exchange.
#
function update_code {
  sed -e "3s/${version}/${new_version}/" ${proj} > p.tmp && mv p.tmp ${proj}
}


#
# Set up the defaults for the script
#
proj="package.json"

# run through all the steps to get the job done.
pull_values
bump $1 ${version}
update_code
echo "Project is now at ${new_version}"

